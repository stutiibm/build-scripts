name: Build Package

on:
  workflow_call:
    inputs:
      validate_build_script:
        required: true
        type: string


jobs:
  build:
    if: ${{ inputs.validate_build_script == 'true' }}
    runs-on: ubuntu-24.04-ppc64le-p10
    steps:
      - uses: actions/checkout@v4
      
      # - uses: actions/download-artifact@v4
      #   with:
      #     name: package-cache
      #     path: package-cache

      - name: Print Hello World
        run: echo "Hello World"

      - name: Print length of GHA_PAT_SEC (safely)
        run: |
          echo "Length of GHA_PAT_SEC: ${#GHA_PAT_SEC}"
        env:
          GHA_PAT_SEC: ${{ secrets.GHA_PAT_SEC }}
     
      - name: Ensure GHA_PAT_SEC is set and print its length
        env :
            gha_pat: ${{ secrets.GHA_PAT_SEC }}
        run: |
          export gha_pat
          if [ -z "$gha_pat" ]; then
            echo "gha_pat is empty!"
          else
            echo "gha_pat is set. Length: ${#gha_pat}"
            echo "First 4 chars of gha_pat: ${gha_pat:0:4}"
          fi
       

      # - name: Get latest run ID of build-info.yaml
      #   id: get_run_id
      #   env:
      #     gha_pat: ${{ secrets.GHA_PAT_SEC }}
      #     REPO: ${{ github.repository }}
      #   run: |
      #     WORKFLOW_FILE="build-info.yaml"
          
      #     #RUN_INFO=$(curl -s -H "Authorization: token $GHA_PAT_SEC" \
      #     #  "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_FILE/runs?status=completed&per_page=1")

      #     RUN_INFO=$(curl -s -H "Authorization: token $GHA_PAT_SEC" https://api.github.com/user)

      #     echo "------------------RUN_INFO :::::  $RUN_INFO---------------------------------------"
          
      #     #RUN_ID=$(echo "$RUN_INFO" | jq -r '.workflow_runs[0].id')
      #     #echo "Latest run-id: $RUN_ID" >> "$GITHUB_OUTPUT"
          
      # - uses: actions/download-artifact@v5
      #   with:
      #     name: package-cache
      #     github-token: ${{ secrets.GHA_PAT_SEC }}
      #     repository: ${{ github.repository }}
      #     run-id: ${{ steps.get-run-id.outputs.run-id }}
      
      # - name: Build Package
      #   run: |
      #     source package-cache/variable.sh
      #     source package-cache/scanner-env.sh
      #     chmod +x ./gha-script/build_package.sh
      #     bash ./gha-script/build_package.sh
      #     cloned_package=$(ls -td -- */ | head -n 1)
      #     mv "$cloned_package" package-cache
      #     echo "export CLONED_PACKAGE=\"$cloned_package\"" >> package-cache/scanner-env.sh
      #     chmod +x ./gha-script/pre_process.sh
      #     bash ./gha-script/pre_process.sh
      #     gzip build_log

      # - name: Fix permissions and upload artifact
      #   run: |
      #     sudo chown -R $USER:$USER package-cache
      #     sudo chmod -R u+rwX,go+rX,go-w package-cache
      
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: updated-package-cache
      #     path: package-cache
